export interface FileUrlsModel {
    fileName: string;
    getUrl?: string;
    deleteUrl?: string;
}

/**
 * User model
 */
export interface UsersModel {

    // user unique Id
    uuid?: string;

    /** user email address */
    email?: string;

    /** user account username */
    username?: string;

    /** user password */
    password?: string;

    passwordArray?: any;

    captchaValue?: number;

    /** user avatar url */
    avatar?: FileUrlsModel;

    /** active user subject (employer,jobseeker, admin) */
    subject?: string;

    isPersistent?: boolean;

    /** user display name */
    displayName?: string;

    /** user full name */
    fullName?: string;

    /** session created date time */
    issuedAt?: Date;

    /** session expiry date time */
    expires?: Date;

    /** authentication type (employer, jobseeker, admin) */
    userType?: UserType;
    jwt?: {
        token?: string;
        expiresOn?: any;
        countdown?: number;
    };
    refreshToken?: string;
    xsrfToken?: string;
}
export interface TokenExchangeModel {
    accessToken: string;
    refreshToken: string;
}

export enum UserType {
    // these values are matched with cookie value to evaluate user types
    // there are 2 types of users, jobseeker, employer
    Admin = 'admin',
    Employer = 'employer',
    Jobseeker = 'jobseeker',
}

export interface LoginCred {
    userType: UserType;
    user: UsersModel;
}

/**  API response model */
export interface ResponseModel {

    /** Response as a content body */
    contentBody?: any;

    /** Response message in plain text */
    messageBody?: string;

    /** Error object within the xhr error response. */
    error?: ResponseModel;

    /** Response error collection such model validations etc., */
    errors?: ErrorCollection[];

    message?: string;

}

export interface ErrorCollection {
    field: string;
    message: string;
}

/**
 * App cookie keys. Only client accessible cookie names generated by server.
 */
export enum CookieKeys {
    Subject = 'j_sub',
    UUId = 'j_uuid',
}


export interface PermissionData {
    /*------ UI properties ------*/
    /**
     * Tree level used by tree control
     */
    level?: number;

    /**
        * Used by UI
        */
    expandable?: boolean;

    /*------ Payload/Response properties ------*/
    /**
    * User permmision object ID to update row values
    */
    userPermissionId?: number;

    /**
     * object Id to store in DB if it is nav_id as resource type, Also used to mab data
     */
    id?: number;

    /**
     * Id of its parent object to map data
     */
    parentId?: number;

    /**
     * Name of the module from DB
     */
    module?: string;

    /**
     * Name of the area from DB
     */
    area?: string;

    /**
     * Client side display text
     */
    name?: string;

    /**
     * Payload resource name as a value to store in DB
     */
    value?: string;

    /**
     * Payload resource type to store in DB
     */
    resourceType?: string;

    /**
     * Whether this object has user access
     */
    hasUserAccess?: boolean;

    /**
     * Children of this node
     */
    children?: PermissionData[];

    /**
     * Payload permission items.
     * either resource operation as ```string[]``` or  nav IDs as ```number[]```
     */
    permissionItems?: number[] | string[];

    /**
    * payload user guid to store permission in DB
    */
    guid?: string;
}

export interface MailServer {
    id?: number;
    userGuid?: string;
    title?: string;
    host?: string;
    port?: number;
    username?: string;
    password?: string;
    isDefault?: boolean;
    requiresAuthentication?: boolean;
    description?: string;
    rowOrder?: number;
    status?: string;
}

